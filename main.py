import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from keyboards import ikb1, new_kb


bot: Bot = Bot(token="API TOKEN")  # –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
dp: Dispatcher = Dispatcher(bot)


USERS: dict = {}  # —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
HELP: str = """–í—Å–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ. –ú—ã –æ–±–∞ –¥–µ–ª–∞–µ–º —Å–≤–æ–π –≤—ã–±–æ—Ä - –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞.\n"
"–ö–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ –∫–∞–º–µ–Ω—å, –∞ –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥—É! –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä"""


async def on_startup(_):
    print("–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ —Ä–∞–±–æ—Ç–µ


@dp.message_handler(commands=["start"])  # —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def process_start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º —Å —Ç–æ–±–æ–π –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞?\n"
                         f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏ /help", reply_markup=new_kb)
    if message.from_user.id not in USERS:  # –µ—Å–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
        USERS[message.from_user.id] = {    # —Ç–æ —Å–æ–∑–¥–∞—ë–º –ø–æ–¥ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
                            "user_wins": 0,  # –ø–æ–±–µ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            "games": 0,  # –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
                            "bot_wins": 0,  # –ø–æ–±–µ–¥—ã –±–æ—Ç–∞
                            "tie": 0,  # –Ω–∏—á—å–∏
                            "in_game": False  # —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
}


@dp.message_handler(commands=["help"])  # —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
async def process_help(message: types.Message):
    await message.answer(HELP)


@dp.message_handler(lambda text: text.text.lower() in ("–¥–∞", "–¥–∞–≤–∞–π", "–¥–∞–≤–∞–π—Ç–µ", "–º–æ–∂–Ω–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–≥–Ω–∞–ª–∏", "–∏–≥—Ä–∞–µ–º"))
async def process_beginning(message: types.Message):
    """
    –§-—Ü–∏—è, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
    """
    if not USERS[message.from_user.id]["in_game"]:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∏–≥—Ä–µ
        USERS[message.from_user.id]["in_game"] = True  # –º–µ–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ –∏–≥—Ä–µ"
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –î–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä!", reply_markup=ikb1)
    else:
        await message.answer("–¢–∞–∫ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞?", reply_markup=ikb1)


@dp.message_handler(Text(equals="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä"))
async def process_stat(message: types.Message):
    """
    –§-—Ü–∏—è, —É–≤–µ–¥–æ–º–ª—è—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏–≥—Ä
    """
    await message.answer(f"–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†:\n1. –í—Å–µ–≥–æ –∏–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {USERS[message.from_user.id]['games']}"
                         f"\n2. –¢–≤–æ–∏ –ø–æ–±–µ–¥—ã: {USERS[message.from_user.id]['user_wins']}"
                         f"\n3. –ü–æ–±–µ–¥—ã –±–æ—Ç–∞: {USERS[message.from_user.id]['bot_wins']}"
                         f"\n4. –ù–∏—á—å–∏—Ö: {USERS[message.from_user.id]['tie']}")


@dp.message_handler(Text(equals="–û—Ç–º–µ–Ω–∞"))
async def process_stat(message: types.Message):
    """
    –§-—Ü–∏—è, –≤—ã–∫–ª—é—á–∞—é—â–∞—è –∏–≥—Ä—É
    """
    if USERS[message.from_user.id]["in_game"]:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
        USERS[message.from_user.id]["in_game"] = False  # –º–µ–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤–Ω–µ –∏–≥—Ä—ã"
        await message.answer("–ñ–∞–ª—å, –±—É–¥—É –∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã!", reply_markup=new_kb)
    else:
        await message.answer("–ê —á—Ç–æ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ? –ú—ã –∂–µ –Ω–µ –∏–≥—Ä–∞–µ–º. "
                             "–ö—Å—Ç–∞—Ç–∏, –º–æ–≥–ª–∏ –±—ã –ø–æ–∏–≥—Ä–∞—Ç—å, —á—Ç–æ —Å–∫–∞–∂–µ—Ç–µ?", reply_markup=new_kb)


@dp.message_handler(lambda y: y.text.lower() in ("–Ω–µ—Ç", "–Ω–µ", "–Ω–µ —Ö–æ—á—É", "–æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", "–Ω–µ –Ω–∞–¥–æ", "–Ω–µ–∞"))
async def process_no(message: types.Message):
    """
    –§-—Ü–∏—è, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–≥—Ä—ã
    """
    if not USERS[message.from_user.id]["in_game"]:
        await message.answer("–û—á–µ–Ω—å –∂–∞–ª—å! –ù–∏—á–µ–≥–æ, –±—É–¥—É –∂–¥–∞—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞!")
    else:
        await message.answer("–ú—ã –∂–µ —Å–µ–π—á–∞—Å —Å –≤–∞–º–∏ –∏–≥—Ä–∞–µ–º, –¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä!")


@dp.message_handler(lambda x: x.text in ("ü™® –ö–∞–º–µ–Ω—å ü™®", "‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è", "üìÑ –ë—É–º–∞–≥–∞ üìÑ"))
async def process_game(message: types.Message):
    """
    –§-—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –±–æ—Ç–∞ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    if USERS[message.from_user.id]["in_game"]:
        USERS[message.from_user.id]["games"] += 1
        bot_choice = random.choice(["ü™® –ö–∞–º–µ–Ω—å ü™®", "‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è", "üìÑ –ë—É–º–∞–≥–∞ üìÑ"])
        if bot_choice == message.text:
            await message.answer(f"–ë–æ—Ç —Ç–æ–∂–µ –≤—ã–±—Ä–∞–ª {bot_choice}, –≤—ã—Ö–æ–¥–∏—Ç, —á—Ç–æ –Ω–∏—á—å—è? –î–∞–≤–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–µ–º!",
                                 reply_markup=new_kb)
            USERS[message.from_user.id]["tie"] += 1
            USERS[message.from_user.id]["in_game"] = False
        else:
            if (bot_choice == "ü™® –ö–∞–º–µ–Ω—å ü™®" and message.text == "‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è")\
                or (bot_choice == "‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è" and message.text == "üìÑ –ë—É–º–∞–≥–∞ üìÑ") or \
                    (bot_choice == "üìÑ –ë—É–º–∞–≥–∞ üìÑ" and message.text == "ü™® –ö–∞–º–µ–Ω—å ü™®"):
                await message.answer(f"–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_choice}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–ú–æ–∂–µ—Ç, –µ—â–µ —Å—ã–≥—Ä–∞–µ–º?", reply_markup=new_kb)
                USERS[message.from_user.id]["bot_wins"] += 1
                USERS[message.from_user.id]["in_game"] = False
            else:
                await message.answer(f"–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_choice}. –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑–æ–∫?", reply_markup=new_kb)
                USERS[message.from_user.id]["user_wins"] += 1
                USERS[message.from_user.id]["in_game"] = False
    else:
        await message.reply("–ê –º—ã —Å –≤–∞–º–∏ –∏ –Ω–µ –∏–≥—Ä–∞–µ–º. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å?")


@dp.message_handler()  # —Ö—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def process_all(message: types.Message):
    await message.answer("–Ø –¥–æ–≤–æ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±–æ—Ç. –ú–æ–∂–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É?", reply_markup=new_kb)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
